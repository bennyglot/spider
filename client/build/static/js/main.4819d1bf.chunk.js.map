{"version":3,"sources":["common/constans.ts","i18n.ts","locales/en/translation.ts","locales/de/translation.ts","pages/route-error/route-error.tsx","pages/routes/routes.tsx","pages/home/home.tsx","stores/index.ts","stores/app.ts","pages/app/mui-theme.ts","pages/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["LanguageKeys","resources","en","Common","Main","Header","Login","Logout","de","initI18Next","i18next","use","initReactI18next","init","lng","interpolation","escapeValue","RouteError","errorText","loadingFactory","moduleName","a","default","message","React","loadModule","routes","path","render","props","Routes","map","route","Route","key","exact","Home","makeAutoObservable","className","CssBaseline","fallback","CircularProgress","stores","appState","isLoggedin","this","muiTheme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","text","catch","error","loglevel","App","theme","HashRouter","Switch","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console"],"mappings":"8OAUaA,EACL,KADKA,EAEL,KCLFC,GDSkB,mBACnBD,EAAkB,WADC,cAEnBA,EAAkB,sBCXL,CAChBE,GCRgB,CACdC,OAAQ,CACJC,KAAM,QAEVC,OAAQ,CACJC,MAAO,QACPC,OAAQ,WDGdC,GETgB,CACdL,OAAQ,CACJC,KAAM,QAEVC,OAAQ,CACJC,MAAO,QACPC,OAAQ,aFUT,SAASE,IACd,OAAOC,IACJC,IAAIC,KACJC,KAAK,CACJZ,YACAa,IAAKd,EACLe,cAAe,CACbC,aAAa,K,uIGVNC,EAP+B,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAC5C,OAAO,6BACH,4BAAKA,K,4CCCb,WAA0BC,EAAoCC,GAA9D,SAAAC,EAAA,+EAGsBF,IAHtB,mBAGwCC,EAHxC,qCAGME,QAHN,gEAMW,CACLA,QAAS,kBAAM,2BAAK,gBAAC,EAAD,CAAYJ,UAAW,KAAIK,cAPrD,0D,sBAYA,IAAMnB,EAAOoB,QAAW,kB,6CAAMC,EAAW,kBAAM,gCAAiC,WAE1EC,EAAuB,CAC3B,CACEC,KAAM,IACNC,OAAQ,SAACC,GAAD,OAAW,gBAACzB,EAASyB,MAqB1B,IAAMC,EAAkC,kBAC7C,gBAAC,WAAD,KAdOJ,EAAOK,KAAI,SAACC,GAAD,OAChB,gBAACC,EAAA,EAAD,CACEC,IAAKF,EAAML,KACXQ,OAAO,EACPR,KAAMK,EAAML,KACZC,OAAQI,EAAMJ,cC9BCQ,E,kDAEnB,WAAYP,GAAQ,IAAD,6BACjB,cAAMA,GACNQ,YAAmB,gBAFF,E,qDASjB,OACE,uBAAKC,UAAW,aACd,gBAACC,EAAA,EAAD,MACA,wBAAMD,UAAW,eACf,uBAAKA,UAAW,YAChB,gBAAC,WAAD,CAAgBE,SAAU,gBAACC,EAAA,EAAD,CAAkBH,UAAW,iBACrD,uBAAKA,UAAW,gBACd,gBAAC,EAAD,c,GAlBoBd,aCPrBkB,EAAS,CAClBC,SCSmB,IAPnB,aAAe,yBAFfC,gBAEc,EACVC,KAAKD,YAAa,EAElBP,YAAmBQ,Q,gBCNdC,EAAWC,YAAe,CACrCC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAEhBE,KAAM,CACJN,QAAS,OACTK,UAAW,WCPjB7C,IACG+C,OAAM,SAACC,GACNC,QAAe,wBAAyBD,MAOrC,IAAME,EAA+B,kBAC1C,gBAAC,IAAajB,EACZ,gBAAC,IAAD,CAAkBkB,MAAOd,GACrB,gBAACe,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD,WCbQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN1D,IACG+C,OAAM,SAACC,GACNC,QAAe,wBAAyBD,MAG5CW,IAASxC,OACP,kBAAC,IAAMyC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLqB,QAAQrB,MAAMA,EAAMlC,c","file":"static/js/main.4819d1bf.chunk.js","sourcesContent":["/** Various sizes for svg icon */\nexport const IconSize = {\n  SM: 1,\n  MD: 1.5,\n  MD1: 1.8,\n  MD2: 2,\n  LG: 2.5,\n};\n\n/** Language keys */\nexport const LanguageKeys = {\n    en: 'en',\n    jp: 'jp',\n  };\n  \n  /** Enum of languages with language key and text */\n  export const Languages = {\n    [LanguageKeys.en]: 'English',\n    [LanguageKeys.jp]: '日本語',\n  };\n  ","import i18next from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport {LanguageKeys} from './common/constans'\n\nimport {en} from './locales/en/translation';\nimport {de} from './locales/de/translation';\n\nconst resources = {\n  en,\n  de\n};\n\n\n/**\n * Initializes i18next with resources and other settings\n */\nexport function initI18Next(): Promise<i18next.TFunction> {\n  return i18next\n    .use(initReactI18next)\n    .init({\n      resources,\n      lng: LanguageKeys.en,\n      interpolation: {\n        escapeValue: false, // React already safe from xss\n      },\n    });\n}","export const en = {\n    Common: {\n        Main: \"Main\"\n    },\n    Header: {\n        Login: \"Login\",\n        Logout: \"Logout\"\n    }\n}","export const de = {\n    Common: {\n        Main: \"Main\"\n    },\n    Header: {\n        Login: \"Login\",\n        Logout: \"Logout\"\n    }\n}","import React from 'react';\n\ninterface routeErrorProps {\n    errorText: string\n}\n\nconst routeError: React.FC<routeErrorProps> = ({errorText}) => {\n    return <div>\n        <h1>{errorText}</h1>\n    </div>\n}\n\nconst RouteError = routeError;\nexport default RouteError;","import * as React from 'react';\nimport { Route, RouteProps } from 'react-router-dom';\nimport RouteError from '../route-error/route-error';\n\n/**\n * Load module dynamically.\n * Handles exception, renders error page in that case\n */\n// tslint:disable-next-line:no-any completed-docs\nasync function loadModule(loadingFactory: () => Promise<any>, moduleName: string): Promise<{default: any}> {\n  try {\n    return {\n      default: (await loadingFactory())[moduleName],\n    };\n  } catch (err) {\n    return {\n      default: () => <div><RouteError errorText={err.message} /></div>,\n    };\n  }\n}\n\nconst Main = React.lazy(() => loadModule(() => import('../../pages/main/main'), 'Main'));\n\nconst routes: RouteProps[] = [\n  {\n    path: '/',\n    render: (props) => <Main {...props} />,\n  },\n];\n\n/**\n * Generates Routes from routes data\n */\nfunction getRoutes(): JSX.Element[] {\n  return routes.map((route: RouteProps) => (\n    <Route\n      key={route.path as string}\n      exact={true}\n      path={route.path}\n      render={route.render}\n    />\n  ));\n}\n\n/**\n * All Routes of app\n */\nexport const Routes: React.FunctionComponent = (): JSX.Element => (\n  <React.Fragment>\n    {getRoutes()}\n  </React.Fragment>\n);\n","import { CircularProgress, CssBaseline } from '@material-ui/core';\nimport { makeAutoObservable } from 'mobx';\nimport * as React from 'react';\nimport { Routes } from '../routes/routes';\n\n/**w\n * Home component, which basically to be shown always!\n */\n\nexport default class Home extends React.Component {\n\n  constructor(props) {\n    super(props); \n    makeAutoObservable(this);\n  }\n\n  \n  /** Renders home component */\n  render(): JSX.Element {\n\n    return (\n      <div className={'continaer'}>\n        <CssBaseline />\n        <main className={'mainContent'}>\n          <div className={'toolbar'} />\n          <React.Suspense fallback={<CircularProgress className={'pageLoading'} />}>\n            <div className={'innerWrapper'}>\n              <Routes />\n            </div>\n          </React.Suspense>\n        </main>\n      </div>\n    );\n  }\n}\n","import {appState} from './app';\n\nexport const stores = {\n    appState\n};","import {makeAutoObservable} from 'mobx';\n \nexport class AppState {\n    isLoggedin: boolean;\n\n    constructor() {\n        this.isLoggedin = false;\n\n        makeAutoObservable(this);\n    }\n}\n\nexport const appState= new AppState();\n    ","import { createMuiTheme } from '@material-ui/core';\n\nexport const muiTheme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#ff7043',\n      main: '#ff5722',\n      dark: '#e64a19',\n      contrastText: '#bf360c',\n    },\n    secondary: {\n      light: '#26a69a',\n      main: '#009688',\n      dark: '#00695c',\n      contrastText: '#004d40',\n    },\n    text: {\n      primary: '#000',\n      secondary: '#fff',\n    },\n  }\n});\n","import { MuiThemeProvider } from '@material-ui/core';\nimport { Provider } from 'mobx-react';\nimport * as React from 'react';\nimport { HashRouter, Switch } from 'react-router-dom';\nimport Home from '../home/home';\nimport { stores } from '../../stores/index';\nimport { initI18Next } from '../../i18n';\nimport * as loglevel from 'loglevel';\nimport { muiTheme } from './mui-theme';\n\n/** initialize i18n */\ninitI18Next()\n  .catch((error) => {\n    loglevel.error('Error in loading i18n', error);\n  });\n\n/**\n * App start from here\n * Basically it does all base configuration before rendering actual app\n */\nexport const App: React.FunctionComponent = (): JSX.Element => (\n  <Provider {...stores}>\n    <MuiThemeProvider theme={muiTheme}>\n        <HashRouter>\n          <Switch>\n            <Home />\n          </Switch>\n        </HashRouter>\n    </MuiThemeProvider>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { initI18Next } from './i18n';\nimport {App} from './pages/app/app';\nimport * as serviceWorker from './serviceWorker';\nimport * as loglevel from 'loglevel';\n\n/** initialize i18n */\ninitI18Next()\n  .catch((error) => {\n    loglevel.error('Error in loading i18n', error);\n  });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}